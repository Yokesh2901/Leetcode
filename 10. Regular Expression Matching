class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # Initialize a memoization table to store intermediate results
        memo = {}

        def dp(i, j):
            # Check if the result is already memoized
            if (i, j) in memo:
                return memo[(i, j)]

            # Base case: if both strings are empty, they match
            if j == len(p):
                return i == len(s)

            # Check if the current characters match
            first_match = i < len(s) and (s[i] == p[j] or p[j] == '.')

            # Handle the case when the next character is '*'
            if j + 1 < len(p) and p[j + 1] == '*':
                # Either skip the '*' and the preceding character, or match the preceding character
                memo[(i, j)] = dp(i, j + 2) or (first_match and dp(i + 1, j))
            else:
                # Otherwise, move both pointers forward
                memo[(i, j)] = first_match and dp(i + 1, j + 1)

            return memo[(i, j)]

        return dp(0, 0)

# Example usage:
sol = Solution()
print(sol.isMatch("aa", "a"))  # Output: False
print(sol.isMatch("aa", "a*"))  # Output: True
print(sol.isMatch("ab", ".*"))  # Output: True
