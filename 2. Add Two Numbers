# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

from typing import Optional

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # Create a dummy node to serve as the starting point of the result list
        dummy_head = ListNode(0)
        current = dummy_head
        carry = 0
        
        # Traverse both linked lists
        while l1 or l2:
            # Get the values from the current nodes, or 0 if we've reached the end of a list
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            # Calculate the sum and the carry
            total_sum = val1 + val2 + carry
            carry = total_sum // 10
            current_sum = total_sum % 10
            
            # Create a new node with the current sum and attach it to the result list
            current.next = ListNode(current_sum)
            current = current.next
            
            # Move to the next nodes in the input lists, if available
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next
        
        # If there's a remaining carry, create a new node for it
        if carry > 0:
            current.next = ListNode(carry)
        
        # The result list starts at dummy_head.next
        return dummy_head.next
